/* Jesse Xing
   jxing3@jhu.edu
*/

import java.util.Scanner;

/**Unique takes arguments from standard input and outputs each "unique" integer once
*/

public class Unique {
   public static Array<Integer> num;
   public static int numindex;

  /*Main program takes arguments from standard input and outputs
  only the integers that are unique.*/

  public static void main(String[] args) throws IndexException, LengthException{

    num = new SimpleArray<Integer>(10, 0);

    boolean flag=true;

    Scanner kb= new Scanner(System.in);
   //loop takes arguments and places legitimate ones in simplearray num while incrementing numindex

    while(kb.hasNext()){
      exparr();
      try{
       int i = Integer.parseInt(kb.nextInt());
       insert i;
      }catch(java.util.InputMismatchException e){
       System.err.println("Non integer argument '"+kb.next()+"' has been detected");
      }
    }

  //loop only prints the elements that are unique from num[] array
    // position of given value in data[], -1 if not found
    private static int find(int value) {
        for (int i = 0; i < used; i++) {
            if (data[i] == value) {
                return i;
            }
        }
        return -1;
    }

    // insert value into data[] if not already present
    private static void insert(int value) {
        int position = find(value);
        if (position < 0) {
            data[used] = value;
            used += 1;
        }
    }

  }

  /**Method expands numarray once the index hits the full length
  of the array- It makes it twice as large*/

  static void exparr() throws IndexException,LengthException {
    if(numindex ==num.length()-1){
        Array<Integer> temp = new SimpleArray<Integer>(num.length()*2, 0);
       for (int c=0; c <= numindex; c++){
          temp.set(c,num.get(c));
       }
       num= temp;
    }
  }

  // position of given value in simple array num, -1 if not found
    private static int find(int value) {
        for (int i = 0; i < numindex; i++) {
            if (num.get(i) == value) {
                return i;
            }
        }
        return -1;
    }

    // insert value into simple array num if not already present
    private static void insert(int value) {
        int position = find(value);
        if (position < 0) {
            num.set(numindex, value);
            numindex += 1;
        }
    }

}
