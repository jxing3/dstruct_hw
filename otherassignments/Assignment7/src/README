Will Zvagelsky   |
wzvagel1         |
wzvagel1@jhu.edu |
-----------------

---------------------
Problem 1: Warming Up|
---------------------

  ---------------------------------------------------------
 |   ArrayListSet   |   ArraySet        |   ListSet        |
 |---------------------------------------------------------|
 |Biased:           |Biased:            |Biased:           |
 |1k: ~0.041 secs   |1k: ~0.043 secs    |1k: ~0.042 secs   |
 |10k: ~0.12 secs   |10k: ~0.15 secs    |10k: ~0.15 secs   |
 |100k: ~0.9 secs   |100k: ~0.98 secs   |100k: ~5.37 secs  |
 |________          |________           |________          |
 |Profiler|         |Profiler|          |Profiler|         |
 |--------          |--------           |--------          |
 |Samples:          |Samples:           |Samples:          |
 |1k: Spends even   |1k: Spends even    |1k: Spends even   |
 |time 16.67% in    |time 16.67% in java|time 16.67% in    |
 |java methods, not |methods, not our   |java methods, and |
 |our set methods   |set methods        |our find method   |
 |                  |                   |                  |
 |10k: Same as for  |10k: Same as for 1k|10k: Spends most  |
 |1k except it's 11%|except it's 3.85%  |time in our find  |
 |in each method    |in each method     |method, 18.18%    |
 |                  |                   |                  |
 |100k: Spends most |100k: Spends 47.5% |100k: Spends most |
 |of time in the    |of the time in the |time in our find  |
 |ArrayList.indexOf |ArraySet's find()  |method, 85.71%    |
 |method 31.75%     |method             |                  |
 |                  |                   |                  |
 |                  |                   |                  |
 |Times:            |Times:             |Times:            |
 |1k: Spends most   |1k: Spends most of |1k: Spends most of|
 |time in java      |time in the Integer|time in the       |
 |Integer.Equals    |Equals method and  |Integer equals and|
 |method, 4.51%     |the ArraySet find  |our find method   |
 |                  |method             |                  |
 |                  |                   |                  |
 |2k: Same as for   |2k: Same as for the|2k: Same as for   |
 |1k except it's    |1k mentioned above |the 1k data sets  |
 |8.43% in equals   |                   |mentioned above,  |
 |                  |                   |10.8% in equals   |
 |                  |                   |and 6.93% in find |
 |                  |                   |                  |
 |4k: Same as for   |4k: Same as the    |4k: Same as above,|
 |1 & 2k except it's|two data sets      |20.96% in equals  |
 |11.14% in the     |mentioned above    |and 12.63% in the |
 |equals method     |                   |find method       |
 |                  |                   |                  |
 |---------------------------------------------------------|
 |Mixed:            |Mixed:             |Mixed:            |
 |1k: ~0.061 secs   |1k: ~0.063 secs    |1k: ~0.062 secs   |
 |10k: ~0.25 secs   |10k: ~0.26 secs    |10k: ~0.41 secs   |
 |100k: ~11.7 secs  |100k: ~12.6 secs   |100k: ~27.8 secs  |
 |________          |________           |________          |
 |Profiler|         |Profiler|          |Profiler|         |
 |--------          |--------           |--------          |
 |Samples:          |Samples:           |Samples:          |
 |1k: Spends even   |1k: Rpends even    |1k: 10% in each   |
 |time 16.67% in    |time 14.29% in java|java method that  |
 |java methods, not |methods, and our   |is run, none of   |
 |our set methods   |find method        |our methods       |
 |                  |                   |                  |
 |10k: Same as for  |10k: Most of the   |10k: Most of the  |
 |1k except it's 35%|time in our find   |time spent in the |
 |in each method    |method, 26.67%     |find method, 51.85|
 |                  |                   |                  |
 |100k: Spends most |100k: Spends 88.5% |100k: Most of the |
 |of time in the    |of the time in the |time spent in the |
 |ArrayList.indexOf |ArraySet's find()  |find method 93.98 |
 |method 89.44%     |method             |                  |
 |                  |                   |                  |
 |Times:            |Times:             |Times:            |
 |1k: Spends most   |1k: Spends most of |1k: Spends most of|
 |time in java      |time in the Integer|time in the       |
 |Integer.Equals    |Equals method and  |Integer equals and|
 |method, indexOf, &|the ArraySet find  |our find method,  |
 |intValue          |method & intValue  |again             |
 |                  |                   |                  |
 |2k: Same as for   |2k: Same as for the|2k: Same as for   |
 |1k                |1k mentioned above |the 1k data sets  |
 |                  |                   |mentioned above,  |
 |                  |                   |but also the      |
 |                  |                   |intValue method   |
 |                  |                   |                  |
 |4k: Same as for   |4k: Same as the    |4k: Same as above |
 |1 & 2k            |two data sets      |                  |
 |                  |mentioned above    |                  |
 |                  |                   |                  |
 |---------------------------------------------------------|
 |Random:           |Random:            |Random:           |
 |1k: ~0.071 secs   |1k: ~0.074 secs    |1k: ~0.078        |
 |10k: ~0.58 secs   |10k: ~0.63 secs    |10k: ~0.63 secs   |
 |100k: ~25.8 secs  |100k: ~27.7        |100k: ~34.7 secs  |
 |________          |________           |________          |
 |Profiler|         |Profiler|          |Profiler|         |
 |--------          |--------           |--------          |
 |Samples:          |Samples:           |Samples:          |
 |1k: Spends even   |1k: Spends even    |1k: Spends even   |
 |time 11.11% in    |time 12.50% in java|time 12.50% in    |
 |java methods, not |methods, not our   |java methods      |
 |our set methods   |set methods        |                  |
 |                  |                   |                  |
 |10k: 46.88% in the|10k: Spends most of|10k: Spends most  |
 |ArrayList's       |the time in the    |time in our find  |
 |indexOf method    |find method, 68.18%|method, 57.58%    |
 |                  |                   |                  |
 |100k: Spends most |100k: Spends 93.9% |100k: Spends most |
 |of time in the    |of the time in the |time in our find  |
 |ArrayList.indexOf |ArraySet's find()  |method, 94.48%    |
 |method 94.96%     |method             |                  |
 |                  |                   |                  |
 |                  |                   |                  |
 |Times:            |Times:             |Times:            |
 |1k: Spends most   |1k: Spends most of |1k: Spends most of|
 |time in java      |time in the Integer|time in the       |
 |Integer.Equals    |Equals method and  |Integer equals and|
 |method, indexOf, &|the ArraySet find  |our find method & |
 |intValue          |method & intValue  |intValue method   |
 |                  |                   |                  |
 |2k: Same as for   |2k: Same as for the|2k: Same as for   |
 |1k                |1k mentioned above |the 1k data sets  |
 |                  |                   |mentioned above & |
 |                  |                   |the intValue      |
 |                  |                   |method            |
 |                  |                   |                  |
 |4k: Same as for   |4k: Same as the    |4k: Same as above |
 |1 & 2k            |two data sets      |                  |
 |                  |mentioned above    |                  |
 |                  |                   |                  |
  ---------------------------------------------------------
 *These values are based on averages found using AT LEAST 5 calls to Unique*

 These results make a lot of sense really. I would expect the ListSet to run slower because it requires a lot of memory allocations for each node in the list. However, the ArrayList and Array implementations require a bit less data because these built-in data structures take less memory than a Node that we must create. The Array is doubled, and when the size is large enough there can be a large number of insertions with no need to resize the array. While the ArrayList is dynamic and only allocates the memory when it needs it, so it runs a bit faster.

-------------------------------
Problem 2: Ordering Sets Around|
-------------------------------

  My OrderedArraySet worked decently well, it was a bit slower than all the implementations above, but not by much. The times represented the same pattern for all the implementations above, just a bit slower:

Biased:
  1k: ~0.04 secs
  10k: ~0.1 secs
  100k: ~0.6 secs

Mixed:
  1k: ~0.08 secs
  10k: ~0.17 secs
  100k: ~4.5 secs

Random:
  1k: ~0.08 secs
  10k: ~0.3 secs
  100k: ~6.9 secs
----------------
*These were run using the worst case file - random.txt*
Samples:
  1k: Spent most time getting permission? Probably skipped over the real methods that were written
  2k: Most time spent writing the output to the trash file that I created so my linux shell doesn't get spammed with unnecessary output. The second most time was spent reading data in from the file
  4k: Most time spent reading data into the program

Times:
  1k: Most of the time was spent in the compareTo method, which makes a lot of sense
  2k: Most of the time was spent reading from the file, but after that was the compareTo - again, makes a lot of sense
  4k: Most time spent in the compareTo, and second most time was spent in the binary search.




-----------------------------
Problem 2: Queuing Priorities|
-----------------------------

This problem was not particulary difficult to implement, but I had some trouble modifying the Unique program. The times that this program ran with were A LOT better than all the other implementations, like excepted - for the reason we discussed in class.

Biased:
  1k: ~0.04 secs
  10k: ~0.1 secs
  100k: ~0.4 secs

Mixed:
  1k: ~0.04 secs
  10k: ~0.08 secs
  100k: ~0.4 secs

Random:
  1k: ~0.05 secs
  10k: ~0.1 secs
  100k: ~0.42 secs
----------------
*These were run using the worst case file - random.txt*
Samples:
  1k: Most of the time was spent checking charAt()? Probably due to the lag when running sample
  2k: Same thing as for 1k
  4k: Most time spent in the same things as above, but there was also a significant amount of time spent in the compareTo

Times:
  1k: Most time spent in ArrayList.get and in the remove method, since we need to check what the value is and then remove it in order to get the next value when using a BinaryHeapPriorityQueue
  2k: Same as for 1k.
  4k: Same as for 2k. Also spent a significant amount of time in the getMaxChild method that I wrote.

It's clear that this implementation is the best one that we have discussed so far in class. The unique program is dramatically different, but the implementation is MUCH better.

